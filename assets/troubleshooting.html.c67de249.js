import{r as n,o as s,c as a,b as e,a as t,F as p,d as l,e as o}from"./app.586fb7f7.js";const c={},i=e("h1",{id:"troubleshooting",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#troubleshooting","aria-hidden":"true"},"#"),l(" Troubleshooting")],-1),u=e("h2",{id:"vue",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue","aria-hidden":"true"},"#"),l(" Vue")],-1),r=l("All Vue-related files are auto-loaded by webpack with "),d={href:"https://webpack.js.org/guides/dependency-management/#requirecontext",target:"_blank",rel:"noopener noreferrer"},k=l("require.context"),m=l(" - Vue components, Vuex modules, as well as mixins and directives with "),g=e("code",null,"global",-1),b=l(" in their filename. Everything is defined in "),q=e("code",null,"src/main.js",-1),v=e("li",null,[e("p",null,[l("Vue components inside "),e("code",null,".liquid"),l(" files can only be used in a non-self-closing kebab case manner.")])],-1),h=o('<div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kebab-case</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kebab-case</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>If a <code>name</code> is defined inside a <code>.vue</code> file, it can be referenced by <code>name</code> otherwise the component will be named after the file path starting from the <code>src/vue/components/</code> directory.</li></ul><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">// src/vue/components/render/my-component.vue</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;MyComponent&#39;</span> <span class="token comment">// not required</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token comment">&lt;!-- has a name defined --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- has no name defined --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>render-my-component</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>render-my-component</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>Use <code>raw</code> tags to output unparsed code inside of <code>.liquid</code> files.</li></ul><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token liquid language-liquid"><span class="token delimiter punctuation">{%</span> <span class="token keyword">raw</span> <span class="token delimiter punctuation">%}</span></span>{{ vueVariable }}<span class="token liquid language-liquid"><span class="token delimiter punctuation">{%</span> <span class="token keyword">endraw</span> <span class="token delimiter punctuation">%}</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>Don&#39;t place regular <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> tags inside the Vue instance. They will be removed on mount. Use Vue <code>&lt;component&gt;</code> tags instead and specify the <code>&#39;is&#39;</code> prop.</li></ul><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>componet</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>componet</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><code>Renderless</code> components require one single root element.</li></ul><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rendereless-component</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ data }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rendereless-component</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>If you want to pass an entire Shopify Drop (Object) as a prop, you have to convert the Drop first to <code>JSON</code> and then replace all double quotes with single quotes.</li></ul><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>\n  <span class="token attr-name">:shopify-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token liquid language-liquid"><span class="token delimiter punctuation">{{</span> product <span class="token operator">|</span> <span class="token function filter">json</span> <span class="token operator">|</span> <span class="token function filter">replace</span><span class="token operator">:</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>Not all Drops can be converted to <code>JSON</code> though if you get an <code>{&quot;error&quot;:&quot;json not allowed for this object&quot;}</code> you&#39;ll have to pass the values in question individually.</li></ul><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>\n  <span class="token attr-name">:shopify-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{\n    productTitle: <span class="token punctuation">&#39;</span><span class="token liquid language-liquid"><span class="token delimiter punctuation">{{</span> product<span class="token punctuation">.</span>title <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&#39;</span>,\n    productId: <span class="token punctuation">&#39;</span><span class="token liquid language-liquid"><span class="token delimiter punctuation">{{</span> product<span class="token punctuation">.</span>id <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&#39;</span>\n  }<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>Whenever you use <code>Vue</code> functionality inside a Shopify <code>section</code> add the <code>vue</code> keyword to the section&#39;s wrapper classes. It fixes rendering issues in the theme editor as well as during development-reloading.</li></ul><div class="language-liquid ext-liquid line-numbers-mode"><pre class="language-liquid"><code><span class="token comment">&lt;!-- shopify/sections/section-file.liquid --&gt;</span>\n\n...\n\n<span class="token liquid language-liquid"><span class="token delimiter punctuation">{%</span> schema <span class="token delimiter punctuation">%}</span></span>\n{\n  &quot;class&quot;: &quot;vue-section&quot;\n}\n<span class="token liquid language-liquid"><span class="token delimiter punctuation">{%</span> endschema <span class="token delimiter punctuation">%}</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',16);c.render=function(l,o){const c=n("OutboundLink");return s(),a(p,null,[i,u,e("ul",null,[e("li",null,[e("p",null,[r,e("a",d,[k,t(c)]),m,g,b,q])]),v]),h],64)};export{c as default};
